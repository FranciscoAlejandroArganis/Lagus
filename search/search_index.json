{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lagus","text":""},{"location":"#types","title":"Types","text":""},{"location":"#lagus_memory_management","title":"<code>lagus_memory_management</code>","text":"<pre><code>typedef struct lagus_memory_management {\n    void * (* allocate) (uint64_t, uint64_t);\n    void * (* reallocate) (void *, uint64_t);\n    void (* deallocate) (void *);\n} lagus_memory_management;\n</code></pre>"},{"location":"#members","title":"Members","text":"<ul> <li><code>allocate</code> is a pointer to a function with the same semantics as that of <code>aligned_alloc</code> from <code>&lt;stdlib.h&gt;</code>.</li> <li><code>reallocate</code> is a pointer to a function with the same semantics as that of <code>realloc</code> from <code>&lt;stdlib.h&gt;</code>.</li> <li><code>deallocate</code> is a pointer to a function with the same semantics as that of <code>free</code> from <code>&lt;stdlib.h&gt;</code>.</li> </ul>"},{"location":"#description","title":"Description","text":"<p>Structure with pointers to dynamic memory management functions.</p>"},{"location":"#lagus_result","title":"<code>lagus_result</code>","text":"<pre><code>typedef enum lagus_result {\n    lagus_success,\n    lagus_memory_allocation,\n    lagus_not_contained,\n    lagus_already_contained,\n    lagus_stop\n} lagus_result;\n</code></pre>"},{"location":"#members_1","title":"Members","text":"<ul> <li><code>lagus_success</code>: successful operation. </li> <li><code>lagus_memory_allocation</code>: memory allocation error.</li> <li><code>lagus_not_contained</code>: a requested element is not contained in the data structure.</li> <li><code>lagus_already_contained</code>: a requested element is already contained in the data structure.</li> <li><code>lagus_stop</code>: iteration stop condition.</li> </ul>"},{"location":"#description_1","title":"Description","text":"<p>Codes returned by lagus functions.</p>"},{"location":"Binary%20Search%20Tree/","title":"Binary Search Tree","text":"<p>Balanced binary search tree. All operations have <code>O(logn)</code> time complexity, where <code>n</code> is the number of elements in the binary search tree.</p>"},{"location":"Binary%20Search%20Tree/#macros","title":"Macros","text":""},{"location":"Binary%20Search%20Tree/#lagus_declare_bst","title":"<code>lagus_declare_bst</code>","text":"<pre><code>lagus_declare_bst (E)\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description","title":"Description","text":"<p>Declares the required types and functions for a binary search tree of type <code>E</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_implement_bst","title":"<code>lagus_implement_bst</code>","text":"<pre><code>lagus_implement_bst (E)\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_1","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_1","title":"Description","text":"<p>Implements all functions declared by <code>lagus_implement_bst (E)</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> <li><code>lagus_implement_bst (E)</code> must be expanded after <code>lagus_declare_bst (E)</code>.</li> </ul>"},{"location":"Binary%20Search%20Tree/#types","title":"Types","text":""},{"location":"Binary%20Search%20Tree/#lagus_compare_e","title":"<code>lagus_compare_E</code>","text":"<pre><code>typedef int64_t (* lagus_compare_E) (E, E);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#description_2","title":"Description","text":"<p>A pointer to a compare function of type <code>E</code>. Values returned by the function are interpreted as follows:</p> <ul> <li>Negative integer: the first argument is less than the second argument.</li> <li>Zero: the first argument is equal to the second argument.</li> <li>Positive integer: the first argument is greater than the second argument.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e","title":"<code>lagus_bst_E</code>","text":"<pre><code>typedef struct lagus_bst_E lagus_bst_E;\n</code></pre>"},{"location":"Binary%20Search%20Tree/#description_3","title":"Description","text":"<p>A binary search tree of type <code>E</code>.</p>"},{"location":"Binary%20Search%20Tree/#lagus_bst_iterator_e","title":"<code>lagus_bst_iterator_E</code>","text":"<pre><code>typedef struct lagus_bst_iterator_E lagus_bst_iterator_E;\n</code></pre>"},{"location":"Binary%20Search%20Tree/#description_4","title":"Description","text":"<p>A binary search tree iterator of type <code>E</code>.</p>"},{"location":"Binary%20Search%20Tree/#initialize","title":"Initialize","text":""},{"location":"Binary%20Search%20Tree/#lagus_bst_e_initialize","title":"<code>lagus_bst_E_initialize</code>","text":"<pre><code>lagus_result lagus_bst_E_initialize (\n    lagus_bst_E * bst\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_2","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results","title":"Results","text":"<ul> <li><code>lagus_success</code> if the binary search tree was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_5","title":"Description","text":"<p>Initializes <code>bst</code> to a new empty binary search tree with default capacity, compare function and memory management.</p> <p>Info</p> <ul> <li><code>bst</code> must be a valid <code>lagus_bst_E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_custom_initialize","title":"<code>lagus_bst_E_custom_initialize</code>","text":"<pre><code>lagus_result lagus_bst_E_custom_initialize (\n    lagus_bst_E * bst,\n    uint64_t capacity,\n    lagus_compare_E compare,\n    lagus_memory_management * memory_management\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_3","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>capacity</code> is the initial capacity.</li> <li><code>compare</code> is a pointer to the compare function the binary search tree will use to compare elements.</li> <li><code>memory_management</code> is a pointer to an <code>lagus_memory_management</code> struct with the callbacks the binary search tree will use to manage dynamic memory.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_1","title":"Results","text":"<ul> <li><code>lagus_success</code> if the binary search tree was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_6","title":"Description","text":"<p>Initializes <code>bst</code> to a new empty binary search tree with the specified capacity, compare function and memory management.</p> <p>Info</p> <ul> <li><code>bst</code> must be a valid <code>lagus_bst_E</code> pointer.</li> <li>If <code>capacity</code> is <code>0</code>, the default capacity is used.</li> <li><code>compare</code> must be a valid <code>lagus_compare_E</code> function or <code>null</code>. If <code>null</code>, the default compare function is used.</li> <li><code>memory_management</code> must be a valid <code>lagus_memory_management</code> pointer or <code>null</code>. If <code>null</code>, the default memory management is used.</li> </ul>"},{"location":"Binary%20Search%20Tree/#finalize","title":"Finalize","text":""},{"location":"Binary%20Search%20Tree/#lagus_bst_e_finalize","title":"<code>lagus_bst_E_finalize</code>","text":"<pre><code>lagus_result lagus_bst_E_finalize (\n    lagus_bst_E * bst\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_4","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_2","title":"Results","text":"<ul> <li><code>lagus_success</code> if the binary search tree was finalized.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_7","title":"Description","text":"<p>Frees all memory allocated by <code>bst</code>.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> </ul>"},{"location":"Binary%20Search%20Tree/#operations","title":"Operations","text":""},{"location":"Binary%20Search%20Tree/#lagus_bst_e_size","title":"<code>lagus_bst_E_size</code>","text":"<pre><code>lagus_result lagus_bst_E_size (\n    lagus_bst_E * bst,\n    uint64_t * size\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_5","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>size</code> is a pointer in which the size is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_3","title":"Results","text":"<ul> <li><code>lagus_success</code> if the size of the binary search tree was retured.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_8","title":"Description","text":"<p>Returns in <code>size</code> the number of elements in <code>bst</code>.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> <li><code>size</code> must be a valid <code>uint64_t</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_add_left","title":"<code>lagus_bst_E_add_left</code>","text":"<pre><code>lagus_result lagus_bst_E_add_left (\n    lagus_bst_E * bst,\n    E element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_6","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_4","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_9","title":"Description","text":"<p>Inserts <code>element</code> into <code>bst</code>. <code>element</code> is inserted at its sorted position. If <code>element</code> is compared as equal to other elements in <code>bst</code>, it is inserted before all such elements.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_add_right","title":"<code>lagus_bst_E_add_right</code>","text":"<pre><code>lagus_result lagus_bst_E_add_right (\n    lagus_bst_E * bst,\n    E element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_7","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_5","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_10","title":"Description","text":"<p>Inserts <code>element</code> into <code>bst</code>. <code>element</code> is inserted at its sorted position. If <code>element</code> is compared as equal to other elements in <code>bst</code>, it is inserted after all such elements.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_add_at","title":"<code>lagus_bst_E_add_at</code>","text":"<pre><code>lagus_result lagus_bst_E_add_at (\n    lagus_bst_E * bst,\n    uint64_t index,\n    E element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_8","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>index</code> is the insertion position.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_6","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_11","title":"Description","text":"<p>Inserts <code>element</code> into <code>bst</code>. <code>element</code> is inserted at <code>index</code>.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size + 1</code> where <code>size</code> is the number of elements in the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_search_left","title":"<code>lagus_bst_E_search_left</code>","text":"<pre><code>lagus_result lagus_bst_E_search_left (\n    lagus_bst_E * bst,\n    E * element,\n    uint64_t * index\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_9","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is a pointer to the element.</li> <li><code>index</code> is a pointer in which the index is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_7","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was found.</li> <li><code>lagus_not_contained</code> if the element is not compared as equal to any other element in the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_12","title":"Description","text":"<p>Searchs the value of <code>element</code> in <code>bst</code>. Returns in <code>element</code> the element found. Returns in <code>index</code> the position of the element found. If the value of <code>element</code> is compared as equal to other elements in <code>bst</code>, the first of all such elements is returned.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> <li><code>index</code> must be a valid <code>uint64_t</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_search_right","title":"<code>lagus_bst_E_search_right</code>","text":"<pre><code>lagus_result lagus_bst_E_search_right (\n    lagus_bst_E * bst,\n    E * element,\n    uint64_t * index\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_10","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is a pointer to the element.</li> <li><code>index</code> is a pointer in which the index is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_8","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was found.</li> <li><code>lagus_not_contained</code> if the element is not compared as equal to any other element in the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_13","title":"Description","text":"<p>Searchs the value of <code>element</code> in <code>bst</code>. Returns in <code>element</code> the element found. Returns in <code>index</code> the position of the element found. If the value of <code>element</code> is compared as equal to other elements in <code>bst</code>, the last of all such elements is returned.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> <li><code>index</code> must be a valid <code>uint64_t</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_remove_left","title":"<code>lagus_bst_E_remove_left</code>","text":"<pre><code>lagus_result lagus_bst_E_remove_left (\n    lagus_bst_E * bst,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_11","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_9","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> <li><code>lagus_not_contained</code> if the element is not compared as equal to any other element in the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_14","title":"Description","text":"<p>Removes the value of <code>element</code> from <code>bst</code>. Returns in <code>element</code> the removed element. If the value of <code>element</code> is compared as equal to other elements in <code>bst</code>, the first of all such elements is removed.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_remove_right","title":"<code>lagus_bst_E_remove_right</code>","text":"<pre><code>lagus_result lagus_bst_E_remove_right (\n    lagus_bst_E * bst,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_12","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_10","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> <li><code>lagus_not_contained</code> if the element is not compared as equal to any other element in the binary search tree.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_15","title":"Description","text":"<p>Removes the value of <code>element</code> from <code>bst</code>. Returns in <code>element</code> the removed element. If the value of <code>element</code> is compared as equal to other elements in <code>bst</code>, the last of all such elements is removed.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized and sorted.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_remove_at","title":"<code>lagus_bst_E_remove_at</code>","text":"<pre><code>lagus_result lagus_bst_E_remove_at (\n    lagus_bst_E * bst,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_13","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>index</code> is the deletion position.</li> <li><code>element</code> is a pointer in which the removed element is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_11","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_16","title":"Description","text":"<p>Removes the element at position <code>index</code> from <code>bst</code>. Returns in <code>element</code> the removed element.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the binary search tree.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_get_at","title":"<code>lagus_bst_E_get_at</code>","text":"<pre><code>lagus_result lagus_bst_E_get_at (\n    lagus_bst_E * bst,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_14","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>index</code> is the position of the element.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_12","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_17","title":"Description","text":"<p>Returns in <code>element</code> the element of <code>bst</code> at position <code>index</code>.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the binary search tree.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_e_set_at","title":"<code>lagus_bst_E_set_at</code>","text":"<pre><code>lagus_result lagus_bst_E_get_at (\n    lagus_bst_E * bst,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_15","title":"Parameters","text":"<ul> <li><code>bst</code> is a pointer to the binary search tree.</li> <li><code>index</code> is the position of the element.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_13","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was set.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_18","title":"Description","text":"<p>Sets the element of <code>bst</code> at position <code>index</code> to the value of <code>element</code>. Returns in <code>element</code> the previous element of the binary search tree at <code>index</code>.</p> <p>Info</p> <ul> <li><code>bst</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the binary search tree.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#iteration","title":"Iteration","text":""},{"location":"Binary%20Search%20Tree/#lagus_bst_iterator_e_initialize","title":"<code>lagus_bst_iterator_E_initialize</code>","text":"<pre><code>lagus_result lagus_bst_iterator_E_initialize (\n    lagus_bst_iterator_E * iterator,\n    lagus_bst_E * bst\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_16","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>bst</code> is a pointer to the binary search tree to iterate.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_14","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was initialized.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_19","title":"Description","text":"<p>Initializes <code>\u00ecterator</code> to iterate <code>bst</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be a valid <code>lagus_bst_iterator_E</code> pointer.</li> <li><code>bst</code> must be initialized.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_iterator_e_next","title":"<code>lagus_bst_iterator_E_next</code>","text":"<pre><code>lagus_result lagus_bst_iterator_E_next (\n    lagus_bst_iterator_E * iterator,\n    E * element\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_17","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_15","title":"Results","text":"<ul> <li><code>lagus_success</code> if the next element was returned.</li> <li><code>lagus_stop</code> if the iteration has no more elements.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_20","title":"Description","text":"<p>Returns in <code>element</code> the next element in the iteration.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Binary%20Search%20Tree/#lagus_bst_iterator_e_finalize","title":"<code>lagus_bst_iterator_E_finalize</code>","text":"<pre><code>lagus_result lagus_bst_iterator_E_finalize (\n    lagus_bst_iterator_E * iterator\n);\n</code></pre>"},{"location":"Binary%20Search%20Tree/#parameters_18","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> </ul>"},{"location":"Binary%20Search%20Tree/#results_16","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was finalized.</li> </ul>"},{"location":"Binary%20Search%20Tree/#description_21","title":"Description","text":"<p>Frees all memory allocated by <code>iterator</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> </ul> <p>Note</p> <p>Included for completeness. No <code>lagus_bst_iterator_E</code> operation allocates any memory. This function does nothing.</p>"},{"location":"List/","title":"List","text":"<p>Linear sequence of elements. All deque operations have amortized <code>O(1)</code> time complexity.</p>"},{"location":"List/#macros","title":"Macros","text":""},{"location":"List/#lagus_declare_list","title":"<code>lagus_declare_list</code>","text":"<pre><code>lagus_declare_list (E)\n</code></pre>"},{"location":"List/#parameters","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the list.</li> </ul>"},{"location":"List/#description","title":"Description","text":"<p>Declares the required types and functions for a list of type <code>E</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> </ul>"},{"location":"List/#lagus_implement_list","title":"<code>lagus_implement_list</code>","text":"<pre><code>lagus_implement_list (E)\n</code></pre>"},{"location":"List/#parameters_1","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the list.</li> </ul>"},{"location":"List/#description_1","title":"Description","text":"<p>Implements all functions declared by <code>lagus_implement_list (E)</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> <li><code>lagus_implement_list (E)</code> must be expanded after <code>lagus_declare_list (E)</code>.</li> </ul>"},{"location":"List/#types","title":"Types","text":""},{"location":"List/#lagus_list_e","title":"<code>lagus_list_E</code>","text":"<pre><code>typedef struct lagus_list_E lagus_list_E;\n</code></pre>"},{"location":"List/#description_2","title":"Description","text":"<p>A list of type <code>E</code>.</p>"},{"location":"List/#lagus_list_iterator_e","title":"<code>lagus_list_iterator_E</code>","text":"<pre><code>typedef struct lagus_list_iterator_E lagus_list_iterator_E;\n</code></pre>"},{"location":"List/#description_3","title":"Description","text":"<p>A list iterator of type <code>E</code>.</p>"},{"location":"List/#initialize","title":"Initialize","text":""},{"location":"List/#lagus_list_e_initialize","title":"<code>lagus_list_E_initialize</code>","text":"<pre><code>lagus_result lagus_list_E_initialize (\n    lagus_list_E * list\n);\n</code></pre>"},{"location":"List/#parameters_2","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> </ul>"},{"location":"List/#results","title":"Results","text":"<ul> <li><code>lagus_success</code> if the list was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the list.</li> </ul>"},{"location":"List/#description_4","title":"Description","text":"<p>Initializes <code>list</code> to a new empty list with default capacity and memory management.</p> <p>Info</p> <ul> <li><code>list</code> must be a valid <code>lagus_list_E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_custom_initialize","title":"<code>lagus_list_E_custom_initialize</code>","text":"<pre><code>lagus_result lagus_list_E_custom_initialize (\n    lagus_list_E * list,\n    uint64_t capacity,\n    lagus_memory_management * memory_management\n);\n</code></pre>"},{"location":"List/#parameters_3","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>capacity</code> is the initial capacity.</li> <li><code>memory_management</code> is a pointer to an <code>lagus_memory_management</code> struct with the callbacks the list will use to manage dynamic memory.</li> </ul>"},{"location":"List/#results_1","title":"Results","text":"<ul> <li><code>lagus_success</code> if the list was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the list.</li> </ul>"},{"location":"List/#description_5","title":"Description","text":"<p>Initializes <code>list</code> to a new empty list with the specified capacity and memory management.</p> <p>Info</p> <ul> <li><code>list</code> must be a valid <code>lagus_list_E</code> pointer.</li> <li>If <code>capacity</code> is <code>0</code>, the default capacity is used.</li> <li><code>memory_management</code> must be a valid <code>lagus_memory_management</code> pointer or <code>null</code>. If <code>null</code>, the default memory management is used.</li> </ul>"},{"location":"List/#finalize","title":"Finalize","text":""},{"location":"List/#lagus_list_e_finalize","title":"<code>lagus_list_E_finalize</code>","text":"<pre><code>lagus_result lagus_bst_E_finalize (\n    lagus_list_E * list\n);\n</code></pre>"},{"location":"List/#parameters_4","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> </ul>"},{"location":"List/#results_2","title":"Results","text":"<ul> <li><code>lagus_success</code> if the list was finalized.</li> </ul>"},{"location":"List/#description_6","title":"Description","text":"<p>Frees all memory allocated by <code>list</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> </ul>"},{"location":"List/#operations","title":"Operations","text":""},{"location":"List/#lagus_list_e_size","title":"<code>lagus_list_E_size</code>","text":"<pre><code>lagus_result lagus_list_E_size (\n    lagus_list_E * list,\n    uint64_t * size\n);\n</code></pre>"},{"location":"List/#parameters_5","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>size</code> is a pointer in which the size is returned.</li> </ul>"},{"location":"List/#results_3","title":"Results","text":"<ul> <li><code>lagus_success</code> if the size of the list was retured.</li> </ul>"},{"location":"List/#description_7","title":"Description","text":"<p>Returns in <code>size</code> the number of elements in <code>list</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>size</code> must be a valid <code>uint64_t</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_add_first","title":"<code>lagus_list_E_add_first</code>","text":"<pre><code>lagus_result lagus_list_E_add_first (\n    lagus_list_E * list,\n    E element\n);\n</code></pre>"},{"location":"List/#parameters_6","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"List/#results_4","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"List/#description_8","title":"Description","text":"<p>Inserts <code>element</code> into <code>list</code>. <code>element</code> is inserted before all other elements of the list.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> </ul>"},{"location":"List/#lagus_list_e_add_last","title":"<code>lagus_list_E_add_last</code>","text":"<pre><code>lagus_result lagus_list_E_add_last (\n    lagus_list_E * list,\n    E element\n);\n</code></pre>"},{"location":"List/#parameters_7","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"List/#results_5","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"List/#description_9","title":"Description","text":"<p>Inserts <code>element</code> into <code>list</code>. <code>element</code> is inserted after all other elements of the list.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> </ul>"},{"location":"List/#lagus_list_e_add_at","title":"<code>lagus_list_E_add_at</code>","text":"<pre><code>lagus_result lagus_list_E_add_at (\n    lagus_list_E * list,\n    uint64_t index,\n    E element\n);\n</code></pre>"},{"location":"List/#parameters_8","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>index</code> is the insertion position.</li> <li><code>element</code> is the element to insert.</li> </ul>"},{"location":"List/#results_6","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> </ul>"},{"location":"List/#description_10","title":"Description","text":"<p>Inserts <code>element</code> into <code>list</code>. <code>element</code> is inserted at <code>index</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size + 1</code> where <code>size</code> is the number of elements in the list.</li> </ul>"},{"location":"List/#lagus_list_e_remove_first","title":"<code>lagus_list_E_remove_first</code>","text":"<pre><code>lagus_result lagus_list_E_remove_first (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_9","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer in which the removed element is returned.</li> </ul>"},{"location":"List/#results_7","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> </ul>"},{"location":"List/#description_11","title":"Description","text":"<p>Removes the first element from <code>list</code>. Returns in <code>element</code> the removed element.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_remove_last","title":"<code>lagus_list_E_remove_last</code>","text":"<pre><code>lagus_result lagus_list_E_remove_last (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_10","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer in which the removed element is returned.</li> </ul>"},{"location":"List/#results_8","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> </ul>"},{"location":"List/#description_12","title":"Description","text":"<p>Removes the last element from <code>list</code>. Returns in <code>element</code> the removed element.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_remove_at","title":"<code>lagus_list_E_remove_at</code>","text":"<pre><code>lagus_result lagus_list_E_remove_at (\n    lagus_list_E * list,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_11","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>index</code> is the deletion position.</li> <li><code>element</code> is a pointer in which the removed element is returned.</li> </ul>"},{"location":"List/#results_9","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> </ul>"},{"location":"List/#description_13","title":"Description","text":"<p>Removes the element at position <code>index</code> from <code>list</code>. Returns in <code>element</code> the removed element.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the list.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_get_first","title":"<code>lagus_list_E_get_first</code>","text":"<pre><code>lagus_result lagus_list_E_get_first (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_12","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"List/#results_10","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was returned.</li> </ul>"},{"location":"List/#description_14","title":"Description","text":"<p>Returns in <code>element</code> the first element of <code>list</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_get_last","title":"<code>lagus_list_E_get_last</code>","text":"<pre><code>lagus_result lagus_list_E_get_last (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_13","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"List/#results_11","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was returned.</li> </ul>"},{"location":"List/#description_15","title":"Description","text":"<p>Returns in <code>element</code> the last element of <code>list</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_get_at","title":"<code>lagus_list_E_get_at</code>","text":"<pre><code>lagus_result lagus_list_E_get_at (\n    lagus_list_E * list,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_14","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>index</code> is the position of the element.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"List/#results_12","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was returned.</li> </ul>"},{"location":"List/#description_16","title":"Description","text":"<p>Returns in <code>element</code> the element of <code>list</code> at position <code>index</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the list.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_set_first","title":"<code>lagus_list_E_set_first</code>","text":"<pre><code>lagus_result lagus_list_E_set_first (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_15","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"List/#results_13","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was set.</li> </ul>"},{"location":"List/#description_17","title":"Description","text":"<p>Sets the first element of <code>list</code> to the value of <code>element</code>. Returns in <code>element</code> the previous first element of the list.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_set_last","title":"<code>lagus_list_E_set_last</code>","text":"<pre><code>lagus_result lagus_list_E_set_last (\n    lagus_list_E * list,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_16","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"List/#results_14","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was set.</li> </ul>"},{"location":"List/#description_18","title":"Description","text":"<p>Sets the last element of <code>list</code> to the value of <code>element</code>. Returns in <code>element</code> the previous last element of the list.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_e_set_at","title":"<code>lagus_list_E_set_at</code>","text":"<pre><code>lagus_result lagus_list_E_get_at (\n    lagus_list_E * list,\n    uint64_t index,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_17","title":"Parameters","text":"<ul> <li><code>list</code> is a pointer to the list.</li> <li><code>index</code> is the position of the element.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"List/#results_15","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was set.</li> </ul>"},{"location":"List/#description_19","title":"Description","text":"<p>Sets the element of <code>list</code> at position <code>index</code> to the value of <code>element</code>. Returns in <code>element</code> the previous element of the list at <code>index</code>.</p> <p>Info</p> <ul> <li><code>list</code> must be initialized.</li> <li><code>index</code> must satisfy <code>1 \u2264 index \u2264 size</code> where <code>size</code> is the number of elements in the list.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#iteration","title":"Iteration","text":""},{"location":"List/#lagus_list_iterator_e_initialize","title":"<code>lagus_list_iterator_E_initialize</code>","text":"<pre><code>lagus_result lagus_list_iterator_E_initialize (\n    lagus_list_iterator_E * iterator,\n    lagus_list_E * list\n);\n</code></pre>"},{"location":"List/#parameters_18","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>list</code> is a pointer to the list to iterate.</li> </ul>"},{"location":"List/#results_16","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was initialized.</li> </ul>"},{"location":"List/#description_20","title":"Description","text":"<p>Initializes <code>\u00ecterator</code> to iterate <code>list</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be a valid <code>lagus_list_iterator_E</code> pointer.</li> <li><code>list</code> must be initialized.</li> </ul>"},{"location":"List/#lagus_list_iterator_e_next","title":"<code>lagus_list_iterator_E_next</code>","text":"<pre><code>lagus_result lagus_list_iterator_E_next (\n    lagus_list_iterator_E * iterator,\n    E * element\n);\n</code></pre>"},{"location":"List/#parameters_19","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"List/#results_17","title":"Results","text":"<ul> <li><code>lagus_success</code> if the next element was returned.</li> <li><code>lagus_stop</code> if the iteration has no more elements.</li> </ul>"},{"location":"List/#description_21","title":"Description","text":"<p>Returns in <code>element</code> the next element in the iteration.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"List/#lagus_list_iterator_e_finalize","title":"<code>lagus_list_iterator_E_finalize</code>","text":"<pre><code>lagus_result lagus_list_iterator_E_finalize (\n    lagus_list_iterator_E * iterator\n);\n</code></pre>"},{"location":"List/#parameters_20","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> </ul>"},{"location":"List/#results_18","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was finalized.</li> </ul>"},{"location":"List/#description_22","title":"Description","text":"<p>Frees all memory allocated by <code>iterator</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> </ul> <p>Note</p> <p>Included for completeness. No <code>lagus_list_iterator_E</code> operation allocates any memory. This function does nothing.</p>"},{"location":"Trie/","title":"Trie","text":"<p>Bitwise trie. The time complexity of all operations is independent of the number of elements in the trie.</p>"},{"location":"Trie/#macros","title":"Macros","text":""},{"location":"Trie/#lagus_declare_trie","title":"<code>lagus_declare_trie</code>","text":"<pre><code>lagus_declare_trie (E)\n</code></pre>"},{"location":"Trie/#parameters","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the trie.</li> </ul>"},{"location":"Trie/#description","title":"Description","text":"<p>Declares the required types and functions for a trie of type <code>E</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> </ul>"},{"location":"Trie/#lagus_implement_trie","title":"<code>lagus_implement_trie</code>","text":"<pre><code>lagus_implement_trie (E)\n</code></pre>"},{"location":"Trie/#parameters_1","title":"Parameters","text":"<ul> <li><code>E</code> is the type of the trie.</li> </ul>"},{"location":"Trie/#description_1","title":"Description","text":"<p>Implements all functions declared by <code>lagus_implement_trie (E)</code>.</p> <p>Info</p> <ul> <li><code>E</code> must be an assignable type and a single keyword or identifier.</li> <li><code>lagus_implement_trie (E)</code> must be expanded after <code>lagus_declare_trie (E)</code>.</li> </ul>"},{"location":"Trie/#types","title":"Types","text":""},{"location":"Trie/#lagus_bit_stream_e","title":"<code>lagus_bit_stream_E</code>","text":"<pre><code>typedef struct lagus_bit_stream_E {\n    uint64_t (* size) (E);\n    uint8_t (* at) (E, uint64_t);\n} lagus_bit_stream_E;\n</code></pre>"},{"location":"Trie/#members","title":"Members","text":"<ul> <li><code>size</code> is a pointer to a function that returns the number of bits in the bit stream of an element.</li> <li><code>at</code> is a pointer to a function that returns the bit at an specified position from the bit stream of an element.</li> </ul>"},{"location":"Trie/#description_2","title":"Description","text":"<p>Structure with pointers to functions that define the bit stream of an element of type <code>E</code>.</p>"},{"location":"Trie/#lagus_trie_e","title":"<code>lagus_trie_E</code>","text":"<pre><code>typedef struct lagus_trie_E lagus_trie_E;\n</code></pre>"},{"location":"Trie/#description_3","title":"Description","text":"<p>A trie of type <code>E</code>.</p>"},{"location":"Trie/#lagus_trie_iterator_e","title":"<code>lagus_trie_iterator_E</code>","text":"<pre><code>typedef struct lagus_trie_iterator_E lagus_trie_iterator_E;\n</code></pre>"},{"location":"Trie/#description_4","title":"Description","text":"<p>A trie iterator of type <code>E</code>.</p>"},{"location":"Trie/#initialize","title":"Initialize","text":""},{"location":"Trie/#lagus_trie_e_initialize","title":"<code>lagus_trie_E_initialize</code>","text":"<pre><code>lagus_result lagus_trie_E_initialize (\n    lagus_trie_E * trie\n);\n</code></pre>"},{"location":"Trie/#parameters_2","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> </ul>"},{"location":"Trie/#results","title":"Results","text":"<ul> <li><code>lagus_success</code> if the trie was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the trie.</li> </ul>"},{"location":"Trie/#description_5","title":"Description","text":"<p>Initializes <code>trie</code> to a new empty trie with default capacity, bit stream and memory management.</p> <p>Info</p> <ul> <li><code>trie</code> must be a valid <code>lagus_trie_E</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_e_custom_initialize","title":"<code>lagus_trie_E_custom_initialize</code>","text":"<pre><code>lagus_result lagus_trie_E_custom_initialize (\n    lagus_trie_E * trie,\n    uint64_t capacity,\n    lagus_bit_stream_E * bit_stream,\n    lagus_memory_management * memory_management\n);\n</code></pre>"},{"location":"Trie/#parameters_3","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>capacity</code> is the initial capacity.</li> <li><code>bit_stream</code> is a pointer to an <code>lagus_bit_stream_E</code> struct with the callbacks the trie will use to consume a bit stream.</li> <li><code>memory_management</code> is a pointer to an <code>lagus_memory_management</code> struct with the callbacks the trie will use to manage dynamic memory.</li> </ul>"},{"location":"Trie/#results_1","title":"Results","text":"<ul> <li><code>lagus_success</code> if the trie was initialized.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to initialize the trie.</li> </ul>"},{"location":"Trie/#description_6","title":"Description","text":"<p>Initializes <code>trie</code> to a new empty trie with the specified capacity, bit stream and memory management.</p> <p>Info</p> <ul> <li><code>trie</code> must be a valid <code>lagus_trie_E</code> pointer.</li> <li>If <code>capacity</code> is <code>0</code>, the default capacity is used.</li> <li><code>bit stream</code> must be a valid <code>lagus_bit_stream_E</code> pointer or <code>null</code>. If <code>null</code>, the default bit stream is used.</li> <li><code>memory_management</code> must be a valid <code>lagus_memory_management</code> pointer or <code>null</code>. If <code>null</code>, the default memory management is used.</li> </ul>"},{"location":"Trie/#finalize","title":"Finalize","text":""},{"location":"Trie/#lagus_trie_e_finalize","title":"<code>lagus_trie_E_finalize</code>","text":"<pre><code>lagus_result lagus_bst_E_finalize (\n    lagus_trie_E * trie\n);\n</code></pre>"},{"location":"Trie/#parameters_4","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> </ul>"},{"location":"Trie/#results_2","title":"Results","text":"<ul> <li><code>lagus_success</code> if the trie was finalized.</li> </ul>"},{"location":"Trie/#description_7","title":"Description","text":"<p>Frees all memory allocated by <code>trie</code>.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> </ul>"},{"location":"Trie/#operations","title":"Operations","text":""},{"location":"Trie/#lagus_trie_e_size","title":"<code>lagus_trie_E_size</code>","text":"<pre><code>lagus_result lagus_trie_E_size (\n    lagus_trie_E * trie,\n    uint64_t * size\n);\n</code></pre>"},{"location":"Trie/#parameters_5","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>size</code> is a pointer in which the size is returned.</li> </ul>"},{"location":"Trie/#results_3","title":"Results","text":"<ul> <li><code>lagus_success</code> if the size of the trie was retured.</li> </ul>"},{"location":"Trie/#description_8","title":"Description","text":"<p>Returns in <code>size</code> the number of elements in <code>trie</code>.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> <li><code>size</code> must be a valid <code>uint64_t</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_e_add_unique","title":"<code>lagus_trie_E_add_unique</code>","text":"<pre><code>lagus_result lagus_trie_E_add_unique (\n    lagus_trie_E * trie,\n    E * element\n);\n</code></pre>"},{"location":"Trie/#parameters_6","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Trie/#results_4","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> <li><code>lagus_already_contained</code> if the element was not inserted due to another element in the trie having the same bit stream.</li> </ul>"},{"location":"Trie/#description_9","title":"Description","text":"<p>Inserts the value of <code>element</code> into <code>trie</code>. If the value of <code>element</code> has the same bit stream as another element in the trie, no changes to the trie are made and the other such element is returned in <code>element</code>.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_e_add_replace","title":"<code>lagus_trie_E_add_replace</code>","text":"<pre><code>lagus_result lagus_trie_E_add_replace (\n    lagus_trie_E * trie,\n    E * element\n);\n</code></pre>"},{"location":"Trie/#parameters_7","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Trie/#results_5","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was inserted.</li> <li><code>lagus_memory_allocation</code> if memory cannot be allocated to insert the element.</li> <li><code>lagus_already_contained</code> if the element replaced another element in the trie having the same bit stream.</li> </ul>"},{"location":"Trie/#description_10","title":"Description","text":"<p>Inserts the value of <code>element</code> into <code>trie</code>. If the value of <code>element</code> has the same bit stream as another element in the trie, the other such element is replaced in the trie and returned in <code>element</code>.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_e_search","title":"<code>lagus_trie_E_search</code>","text":"<pre><code>lagus_result lagus_trie_E_search (\n    lagus_trie_E * trie,\n    E * element\n);\n</code></pre>"},{"location":"Trie/#parameters_8","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Trie/#results_6","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was found.</li> <li><code>lagus_not_contained</code> if the element does not have the same bit stream as any other element in the trie.</li> </ul>"},{"location":"Trie/#description_11","title":"Description","text":"<p>Searchs the value of <code>element</code> in <code>bst</code>. Returns in <code>element</code> the element found.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_e_remove","title":"<code>lagus_trie_E_remove</code>","text":"<pre><code>lagus_result lagus_trie_E_remove (\n    lagus_trie_E * trie,\n    E * element\n);\n</code></pre>"},{"location":"Trie/#parameters_9","title":"Parameters","text":"<ul> <li><code>trie</code> is a pointer to the trie.</li> <li><code>element</code> is a pointer to the element.</li> </ul>"},{"location":"Trie/#results_7","title":"Results","text":"<ul> <li><code>lagus_success</code> if the element was removed.</li> <li><code>lagus_memory_allocation</code> if the element was removed but memory reallocation failed.</li> <li><code>lagus_not_contained</code> if the element does not have the same bit stream as any other element in the trie.</li> </ul>"},{"location":"Trie/#description_12","title":"Description","text":"<p>Removes the value of <code>element</code> from <code>trie</code>. Returns in <code>element</code> the removed element.</p> <p>Info</p> <ul> <li><code>trie</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Trie/#iteration","title":"Iteration","text":""},{"location":"Trie/#lagus_trie_iterator_e_initialize","title":"<code>lagus_trie_iterator_E_initialize</code>","text":"<pre><code>lagus_result lagus_trie_iterator_E_initialize (\n    lagus_trie_iterator_E * iterator,\n    lagus_trie_E * trie\n);\n</code></pre>"},{"location":"Trie/#parameters_10","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>trie</code> is a pointer to the trie to iterate.</li> </ul>"},{"location":"Trie/#results_8","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was initialized.</li> </ul>"},{"location":"Trie/#description_13","title":"Description","text":"<p>Initializes <code>\u00ecterator</code> to iterate <code>trie</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be a valid <code>lagus_trie_iterator_E</code> pointer.</li> <li><code>trie</code> must be initialized.</li> </ul>"},{"location":"Trie/#lagus_trie_iterator_e_next","title":"<code>lagus_trie_iterator_E_next</code>","text":"<pre><code>lagus_result lagus_trie_iterator_E_next (\n    lagus_trie_iterator_E * iterator,\n    E * element\n);\n</code></pre>"},{"location":"Trie/#parameters_11","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> <li><code>element</code> is a pointer in which the element is returned.</li> </ul>"},{"location":"Trie/#results_9","title":"Results","text":"<ul> <li><code>lagus_success</code> if the next element was returned.</li> <li><code>lagus_stop</code> if the iteration has no more elements.</li> </ul>"},{"location":"Trie/#description_14","title":"Description","text":"<p>Returns in <code>element</code> the next element in the iteration.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> <li><code>element</code> must be a valid <code>E</code> pointer.</li> </ul>"},{"location":"Trie/#lagus_trie_iterator_e_finalize","title":"<code>lagus_trie_iterator_E_finalize</code>","text":"<pre><code>lagus_result lagus_trie_iterator_E_finalize (\n    lagus_trie_iterator_E * iterator\n);\n</code></pre>"},{"location":"Trie/#parameters_12","title":"Parameters","text":"<ul> <li><code>iterator</code> is a pointer to the iterator.</li> </ul>"},{"location":"Trie/#results_10","title":"Results","text":"<ul> <li><code>lagus_success</code> if the iterator was finalized.</li> </ul>"},{"location":"Trie/#description_15","title":"Description","text":"<p>Frees all memory allocated by <code>iterator</code>.</p> <p>Info</p> <ul> <li><code>iterator</code> must be initialized.</li> </ul> <p>Note</p> <p>Included for completeness. No <code>lagus_trie_iterator_E</code> operation allocates any memory. This function does nothing.</p>"}]}